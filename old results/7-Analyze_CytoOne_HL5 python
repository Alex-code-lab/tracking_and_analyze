#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  1 12:46:56 2023.

@author: souchaud
"""

import os
import time
import math
import pandas as pd
import numpy as np
import imageio.v2 as imageio
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib import colormaps
from cycler import cycler
import trackpy as tp
import functions_analyze as lib
import warnings
import importlib
from colorama import init
from typing import List, Optional, Union, Any, Dict, Tuple
from scipy.stats import linregress
from scipy.optimize import curve_fit
import seaborn as sns


# Reload custom library
importlib.reload(lib)

# Initialize colorama
init(autoreset=True)

# Suppress specific warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore", category=FutureWarning)

# Set default matplotlib style
plt.style.use('default')

# plt.rcParams.update({
#     # Figure
#     "figure.figsize": (10, 6),  # Taille par défaut de la figure (largeur, hauteur en pouces)
#     "figure.dpi": 100,  # Résolution en points par pouce
#     "figure.facecolor": (0, 0, 0, 1),  # Fond de la figure : noir pur
#     "figure.edgecolor": "white",  # Bordure de la figure en blanc
#     "figure.titlesize": 20,  # Taille de la police pour le titre principal
#     "figure.titleweight": "bold",  # Style de la police pour le titre principal : gras

#     # Axes
#     "axes.facecolor": (0, 0, 0, 1),  # Fond des axes : noir pur
#     "axes.edgecolor": "white",  # Bordure des axes en blanc
#     "axes.linewidth": 2,  # Épaisseur des bordures des axes
#     "axes.titlesize": 16,  # Taille de la police des titres des axes
#     "axes.titleweight": "bold",  # Style de la police pour les titres des axes : gras
#     "axes.labelsize": 14,  # Taille de la police des étiquettes des axes
#     "axes.labelweight": "medium",  # Style de la police des étiquettes : intermédiaire
#     "axes.labelcolor": "white",  # Couleur des étiquettes des axes
#     "axes.prop_cycle": cycler(color=["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"]),  # Cycle des couleurs pour les lignes
#     "axes.grid": True,  # Activer la grille
#     "axes.grid.axis": "both",  # Grille pour les deux axes (x et y)
#     "axes.grid.which": "major",  # Grille pour les ticks principaux
#     "grid.color": "gray",  # Couleur des lignes de la grille
#     "grid.linewidth": 0.5,  # Épaisseur des lignes de la grille
#     "grid.alpha": 0.6,  # Transparence des lignes de la grille

#     # Ticks (Graduations)
#     "xtick.color": "white",  # Couleur des ticks sur l'axe x
#     "ytick.color": "white",  # Couleur des ticks sur l'axe y
#     "xtick.labelsize": 16,  # Taille de la police des ticks sur l'axe x
#     "ytick.labelsize": 16,  # Taille de la police des ticks sur l'axe y
#     "xtick.direction": "in",  # Ticks pointant vers l'intérieur sur l'axe x
#     "ytick.direction": "in",  # Ticks pointant vers l'intérieur sur l'axe y
#     "xtick.major.size": 8,  # Longueur des ticks principaux sur l'axe x
#     "ytick.major.size": 8,  # Longueur des ticks principaux sur l'axe y
#     "xtick.minor.size": 4,  # Longueur des ticks secondaires sur l'axe x
#     "ytick.minor.size": 4,  # Longueur des ticks secondaires sur l'axe y
#     "xtick.major.width": 1.5,  # Épaisseur des ticks principaux sur l'axe x
#     "ytick.major.width": 1.5,  # Épaisseur des ticks principaux sur l'axe y

#     # Lignes et marqueurs
#     # "lines.linewidth": 2,  # Épaisseur par défaut des lignes
#     # "lines.linestyle": "-",  # Style par défaut des lignes continues
#     # "lines.color": "#1f77b4",  # Couleur par défaut des lignes
#     # "lines.marker": "o",  # Marqueur par défaut : cercle
#     # "lines.markersize": 8,  # Taille par défaut des marqueurs
#     # "lines.markeredgewidth": 1.5,  # Épaisseur du bord des marqueurs
#     # "lines.markerfacecolor": "blue",  # Couleur du remplissage des marqueurs

#     # Polices
#     "font.size": 12,  # Taille globale de la police
#     "font.family": "sans-serif",  # Famille de polices par défaut
#     "font.sans-serif": ["Arial", "Helvetica", "DejaVu Sans"],  # Liste des polices sans-serif préférées
#     "text.color": "white",  # Couleur du texte

#     # Légendes
#     "legend.loc": "upper right",  # Emplacement par défaut de la légende
#     "legend.fontsize": 12,  # Taille de la police pour la légende
#     "legend.frameon": True,  # Activer le cadre autour de la légende
#     "legend.framealpha": 0.8,  # Transparence du cadre de la légende
#     "legend.edgecolor": "white",  # Couleur de la bordure de la légende
#     "legend.facecolor": (0.2, 0.2, 0.2, 0.9),  # Fond de la légende : gris foncé semi-transparent

#     # Sauvegarde des graphiques
#     "savefig.dpi": 300,  # Résolution par défaut pour les fichiers sauvegardés
#     "savefig.format": "png",  # Format par défaut pour les fichiers sauvegardés
#     "savefig.facecolor": (0, 0, 0, 1),  # Fond des figures sauvegardées : noir pur
#     "savefig.edgecolor": "none",  # Pas de bordure pour les figures sauvegardées
#     "savefig.transparent": True,  # Fond transparent pour les fichiers sauvegardés

#     # Couleurs et cycles
#     "image.cmap": "viridis",  # Palette par défaut pour les images
# })

plt.rcParams.update({
    # Figure
    "figure.figsize": (7, 5),  # Taille classique pour une figure d'article
    "figure.dpi": 300,
    "figure.facecolor": "white",
    "figure.edgecolor": "white",
    "figure.titlesize": 14,
    "figure.titleweight": "bold",

    # Axes
    "axes.facecolor": "white",
    "axes.edgecolor": "black",
    "axes.linewidth": 1,
    "axes.titlesize": 12,
    "axes.titleweight": "bold",
    "axes.labelsize": 11,
    "axes.labelweight": "normal",
    "axes.labelcolor": "black",
    "axes.prop_cycle": cycler(color=[
        "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b"
    ]),
    "axes.grid": False,

    # Ticks
    "xtick.color": "black",
    "ytick.color": "black",
    "xtick.labelsize": 10,
    "ytick.labelsize": 10,
    "xtick.direction": "out",
    "ytick.direction": "out",
    "xtick.major.size": 5,
    "ytick.major.size": 5,
    "xtick.major.width": 1,
    "ytick.major.width": 1,

    # Lignes
    "lines.linewidth": 1.5,
    "lines.markersize": 6,

    # Police
    "font.size": 11,
    "font.family": "sans-serif",
    "font.sans-serif": ["Arial", "Helvetica", "DejaVu Sans"],
    "text.color": "black",

    # Légendes
    "legend.loc": "best",
    "legend.fontsize": 10,
    "legend.frameon": False,

    # Sauvegarde
    "savefig.dpi": 600,
    "savefig.format": "png",
    "savefig.facecolor": "white",
    "savefig.edgecolor": "white",
    "savefig.transparent": False,

    # Images
    "image.cmap": "viridis",
})

# Set initial time
INITIAL_TIME = time.time()

# Experiment parameters
TIME_FRAME = 15
SIZE_PIX = 0.637
FPS = 1 / TIME_FRAME

# File to study
file_name = 'filtered_final'
N_FRAME_MIN_STUDY = 200

# Study parameters
ROLLING_MEAN = False
PIXELISATION = False
TIME_FRAME_STUDY = False
DRIFT = False

# Plot parameters
IMG_TYPE = 'png'
ALPHA = 0.5
LINEWIDTH = 0.1
COLOR_SUP = 'blue'
COLOR_INF = 'red'
color_sup_inf = (COLOR_SUP, COLOR_INF)

# General paths
GENERAL_PATH = '/Users/souchaud/Desktop/Analyses/'
GENERAL_PATH_PICTURES = '/Users/souchaud/Desktop/A_analyser/'

# Condition
CONDITION_simple = 'CytoOne_HL5_10x'
CONDITION = f'{CONDITION_simple}_results_tracking'

# Get list of experiments
PATHWAY_EXPERIMENT = [f for f in os.listdir(GENERAL_PATH + CONDITION)
                      if os.path.isdir(os.path.join(GENERAL_PATH + CONDITION, f))]

# Update experiment paths
PATHWAY_EXPERIMENT = [os.path.join(GENERAL_PATH, CONDITION, elem, 'mosaic')
                      for elem in PATHWAY_EXPERIMENT]

# Path to save pictures
path_save_pic = os.path.join(GENERAL_PATH, f'résultats_{CONDITION}_All')

# Create directory if it doesn't exist
os.makedirs(path_save_pic, exist_ok=True)
os.chdir(path_save_pic)


# Add incubation times to DATA
conditions_to_values = {
    'ASMOT127': 4.25, 'ASMOT128': 23.58, 'ASMOT130': 29.58, 'ASMOT132': 4.33, 'ASMOT133': 23.12,
    'ASMOT134': 26.12, 'ASMOT135': 29, 'ASMOT136': 31.12, 'ASMOT137': 47.3, 'ASMOT138': 49.75,
    'ASMOT139': 52.25, 'ASMOT140': 0, 'ASMOT141': 4.08, 'ASMOT142': 16.25, 'ASMOT143': 18.67,
    'ASMOT144': 21.08, 'ASMOT145': 23.83, 'ASMOT146': 42.17, 'ASMOT147': 51.17, 'ASMOT148': 47.17,
    'ASMOT149': 70.92, 'ASMOT150': 66.67, 'ASMOT151': 71.17, 'ASMOT152': 76.33, 'ASMOT153': 78.33,
    'ASMOT154': 94.75, 'ASMOT155': 98.42, 'ASMOT156': 100.25, 'ASMOT157': 46.25, 'ASMOT158': 48.08,
    'ASMOT159': 69.58, 'ASMOT160': 20.25, 'ASMOT161': 22.42, 'ASMOT162': 92.33, 'ASMOT163': 0.0,
    'ASMOT164': 5.25, 'ASMOT165': 23.08, 'ASMOT166': 20.08, 'ASMOT167': 21.08, 'ASMOT168': 21.08,
    'ASMOT169': 21.08, 'ASMOT170': 4.58, 'ASMOT171': 7.00, 'ASMOT172': 24.00, 'ASMOT173': 25.58,
    'ASMOT174': 30.58, 'ASMOT175': 47.58, 'ASMOT176': 71.83, 'ASMOT177': 76.67, 'ASMOT178': 77.67,
    'ASMOT179': 95.08, 'ASMOT180': 97.58, 'ASMOT181': 21.08,
}

experiment_to_dell= {
    'ASMOT163',
    'ASMOT161',
    'ASMOT164',
}


# Read HDF5 data
importlib.reload(lib)
DATA = lib.read_hdf5_all(
    pathway_experiment=PATHWAY_EXPERIMENT,
    name_file=file_name,
    nbr_frame_min=N_FRAME_MIN_STUDY,
    condition=CONDITION,
    drift=DRIFT,
    search_range=20,
    memory=5
)
# Vérifier si le dictionnaire `experiment_to_dell` n'est pas vide
if experiment_to_dell:
    print(f"Suppression des expériences : {experiment_to_dell}")
    
    # Supprimer les expériences spécifiées
    DATA = DATA[~DATA['experiment'].isin(experiment_to_dell)]
    DATA.reset_index(drop=True, inplace=True)
    print(f"Nombre d'expériences restantes après suppression des expériences ratées: {DATA['experiment'].nunique()}")
else:
    print("Aucune expérience à supprimer, `experiment_to_dell` est vide.")

# Sort DATA by 'frame'
DATA.sort_values(by='frame', inplace=True)

# Filter DATA
print("Nombre de particules avant tri: ", DATA['particle'].nunique())
DATA = DATA[DATA['frame'] < 340]

# Keep particles with sufficient frames
DATA = DATA.groupby('particle').filter(lambda x: len(x) >= N_FRAME_MIN_STUDY)
print("Nombre de particules après tri: ", DATA['particle'].nunique())

# Apply optional data transformations
if ROLLING_MEAN:
    DATA = lib.rolling_mean(datas=DATA, roll=3)
if PIXELISATION:
    DATA = lib.pixelisation(datas=DATA, size_pix=SIZE_PIX)
if TIME_FRAME_STUDY:
    DATA, TIME_FRAME = lib.keep_nth_image(traj=DATA, n=N_FRAME_MIN_STUDY, time_frame=TIME_FRAME)

# Calculate instant velocities
DATA['time (min)'] = DATA['frame'] * TIME_FRAME / 60
DATA = lib.vit_instant_new(traj=DATA, lag_time=TIME_FRAME, pix_size=SIZE_PIX, triage=1)

DATA['time to incubation (hours)'] = DATA['experiment'].map(conditions_to_values).fillna(0.0)

# Center trajectories
DATA.reset_index(inplace=True)
# Compute MSD and cutoff
DATA2 = DATA.copy()
DATA2['frame'] = pd.factorize(DATA2['frame'])[0]
IMSD = tp.imsd(traj=DATA2, mpp=SIZE_PIX, fps=FPS, max_lagtime=200, statistic='msd')

# Trajectory clustering with fit and defining a cutoff
LAG_TIME_FIT = 5
importlib.reload(lib)
COEF_INF, COEF_SUP, PART_COEF_INF, PART_COEF_SUP, CUTOFF = lib.traj_clustering_with_fit_cutoff(
    DATA2, imsd=IMSD, hist=True, lag_time_fit=LAG_TIME_FIT, micronperpixel=SIZE_PIX,
    fps=FPS, binsize=250, peak_height=50, peak_width=1, save=True, pathway_fig=path_save_pic,
    name='all_experiment_autocorr', img_type=IMG_TYPE, plot=True, color_sup_inf=color_sup_inf,
    cutoff_default=0
)
# Keep only particles above cutoff
DATA = DATA[DATA['particle'].isin(PART_COEF_SUP)]

# Recompute MSD
# DATA_intermediaire = DATA.copy()
DATA['frame'] = pd.factorize(DATA['frame'])[0]
IMSD = tp.imsd(traj=DATA, mpp=SIZE_PIX, fps=FPS, max_lagtime=200, statistic='msd')
EMSD = tp.emsd(traj=DATA, mpp=SIZE_PIX, fps=FPS, max_lagtime=200)